<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
      integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"
      integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"
      crossorigin="anonymous"
    ></script>
    <link rel="stylesheet" href="/stylesheets/chatpagedesign.css" />
    <title>Float Chat</title>
  </head>

  <body>
    <nav class="navbar navbar-dark">
      <div class="">
        <img src="https://img.icons8.com/bubbles/50/000000/user-male.png" />
        <%=currentUser.username %>
      </div>
      <a class="navbar-brand">Float Chat</a>
      <div class="logout"><a href="/logout">Logout</a></div>
      <!-- <a class="navbar-brand" href="#" id="main_user">
=======
        </a> -->
    </nav>

    <!-- ===================Main Body ====================-->
    <!-- Three Column Layout -->
    <div class="container-fluid">
      <div class="row">
        <!-- ==================Column One For Chat names ============= -->
        <!-- Ejs Format  -->
        <!-- Use "users" as object passed from node -->
        <div class="col-4" id="chat_names">
          <ul id="chat_names_ul">
            <% users.forEach(function (user){ %> <% if(user.name
            !==currentUser.username) { %>
            <li id="<%=user.name %>" class="single-user">
              <div>
                <img
                  src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSwmDUeKI2SbaMIad13ZOpQvh8NdOALcMjrcJepUFVwUHWottKJi68D26LPiotJ1VtCqgM&usqp=CAU"
                  class="user-image"
                />
                <span class="chat_contacts"></span>
              </div>
              <div class="username">
                <%= user.name %><br />
                <span class="chat-text">Start Chatting</span>
              </div>
              <hr />
            </li>
            <% }}); %>
          </ul>
        </div>
        <!-- Column One Ends -->

        <!-- ==========Column Two For Chats (Chat Window) =============== -->
        <div class="col-8" id="chat_text">
          <div class="chat_window">
            <!-- Hr Just for fun -->
            <!-- -----------this past is made by javascript on the clients side----------- -->
            <hr />
            <ul id="chat_window_ul">
              <!-- <li class="contact_message">
                                <img src="https://ptetutorials.com/images/user-profile.png"/>
                                <span>${data.msg}</span>
                            </li> -->
            </ul>
          </div>
        </div>
        <!-- Column 2 Ends -->

        <!-- =================Column Three for Typing Test and Sending it========== -->
        <!-- -------it ha sbeen made seperate column to make it stick to the botton of the page 
                and not move -->
        <div class="input_message">
          <form action="" class="send-message">
            <div class="row">
              <div class="col-sm-11">
                <input
                  id="input_message"
                  type="text"
                  name="message"
                  placeholder="Enter a Message to Send"
                />
              </div>
              <div class="col-sm-1">
                <button type="submit" id="send_button">
                  <img
                    src="https://img.icons8.com/material-rounded/24/000000/filled-sent.png"
                  />
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script
      src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"
      integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV"
      crossorigin="anonymous"
    ></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
    <script src="https://unpkg.com/@virgilsecurity/e3kit-browser@^2.3.3/dist/browser.umd.js"></script>
    <script type="text/javascript" src="/js/user.js"></script>
    <!-- <script src="/js/chatpagelogic.js"></script> -->
    <script>
      $(document).ready(() => {
        const thisUser = "<%=currentUser.username%>";
        const userId = "<%=currentUser._id%>";

        const sender = new User(thisUser);
        let recieverLookup = null;
        let senderLookup = null;
        async function getKeys(reciever) {
          return await sender.findUser([reciever]);
        }
        async function main() {
          await sender.initialize(thisUser);
          await sender.register();
          senderLookup = await getKeys(thisUser);
        }
        main();

        // Initialize socket and make connection

        function addUserToList(name) {
          if (name.trim() !== thisUser.trim()) {
            let flag = false;
            const listItems = $("#chat_names_ul li");

            listItems.each((index, element) => {
              if ($(element).attr("id") === name.trim()) {
                flag = true;
              }
            });
            if (!flag) {
              $("#chat_names_ul").append(
                `<li id="${name}" class="single-user">
                  <div>
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSwmDUeKI2SbaMIad13ZOpQvh8NdOALcMjrcJepUFVwUHWottKJi68D26LPiotJ1VtCqgM&usqp=CAU" class="user-image"/>
                    <span class="chat_contacts"></span>
                  </div>
                  <div class="username">
                    ${name}<br />
                    <span>Start Chatting</span>
                  </div>
                  <hr />
                </li>`
              );
            }
          }
        }
        const socket = io({
          query: {
            username: thisUser,
          },
        });

        var senderId;
        socket.emit("join", { userId: thisUser });
        // Append new user to list on a new connectionZ
        socket.on("newUser", (data) => {
          addUserToList(data.name);
          // }
        });
        socket.on("connectedUsers", ({ users }) => {
          users.forEach((user) => {
            addUserToList(user.userId);
          });
        });

        socket.on("loadChatHistory", ({ chats }) => {
          chats.forEach((chat) => {
            addUserToList(chat.messageWith.username);
          });
        });

        // Get reciver on clicking on a user from the active user's list
        var reciever = null;

        $("#chat_names_ul").on("click", "li", async function () {
          if ($(this).attr("id") !== reciever) {
            reciever = $(this).attr("id");

            $("#chat_window_ul").html("");
            $("#chat_names_ul li").each(function (list) {
              $(this).removeClass("active"); // this first remove the css class from every contact
              $(this).find(".chat-text").html("Start Chatting");
            });
            $(this).addClass("active"); // this adds the css class to the active contact
            //   console.log(reciever);
            $(this).find(".chat-text").html("Chatting...");
            const user = await getKeys(reciever);
            recieverLookup = user;

            socket.emit("loadMessages", {
              userId: thisUser,
              messageWith: reciever,
            });
          }
        });
        socket.on("messagesLoaded", ({ chats }) => {
          chats.messages.forEach((chat) => {
            addChatToWindow(chat);
          });
        });

        const addChatToWindow = (chat) => {
          if (chat.sender === userId) {
            console.log(`Encrypted Message: ${chat.msg}`);
            sender
              .authDecrypt(chat.msg, senderLookup[thisUser])
              .then((text) => {
                console.log(`Decrypted Message: ${text}`);
                const decryptedText = text;
                $("#chat_window_ul").append(
                  `<li class="user_message"><span>${decryptedText}</span></li>`
                );
              });
          } else {
            sender
              .authDecrypt(chat.msg, recieverLookup[reciever])
              .then((text) => {
                console.log(`Decrypted Message: ${text}`);
                const decryptedText = text;
                $("#chat_window_ul").append(
                  `<li class="contact_message">
                <img class="user-image" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSwmDUeKI2SbaMIad13ZOpQvh8NdOALcMjrcJepUFVwUHWottKJi68D26LPiotJ1VtCqgM&usqp=CAU"/>
                <span>${decryptedText}</span>
              </li>`
                );
              });
            // $("#chat_window_ul").append(

            // );
          }
        };

        $(".send-message").on("submit", (event) => {
          // console.log("Message sent!");
          event.preventDefault();
          if (!reciever) {
            return alert("Please select a user to send a message to!");
          }

          sendMessage();
        });
        // Emit a message event with message data as payload
        const sendMessage = () => {
          const data = $("#input_message").val();

          var encryptedText;
          $("#input_message").val("");
          // console.log(data);
          sender.authEncrypt(data, recieverLookup[reciever]).then((text) => {
            encryptedText = text;
            console.log(`Sent Message: ${encryptedText}`);
            socket.emit("sendMessage", {
              userId: thisUser,
              messageTo: reciever,
              text: encryptedText,
            });
          });
          $("#chat_window_ul").append(
            `<li class="user_message"><span>${data}</span></li>`
          );
        };
        // On recieving a message from the server
        socket.on("newMessage", ({ newMessage, userId }) => {
          console.log(reciever, userId);
          if (userId !== reciever) {
            return;
          } else {
            console.log("Encypted message: " + newMessage.msg);
            // console.log(recieverLookup);
            sender
              .authDecrypt(newMessage.msg, recieverLookup[reciever])
              .then((text) => {
                console.log(`Decrypted message: ${text}`);
                const decryptedText = text;

                $("#chat_window_ul").append(
                  `<li class="contact_message">
                    <img class="user-image" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSwmDUeKI2SbaMIad13ZOpQvh8NdOALcMjrcJepUFVwUHWottKJi68D26LPiotJ1VtCqgM&usqp=CAU"/>
                    <span>${decryptedText}</span>
                  </li>`
                );
              });
          }
        });
        // Remove user from list on disconnect
        socket.on("removeUser", (data) => {
          // if (data.name === reciever) {
          //   alert(`${data.name} has left!`);
          //   $("#chat_window_ul").html("");
          // }
        });
      });
    </script>
  </body>
</html>
